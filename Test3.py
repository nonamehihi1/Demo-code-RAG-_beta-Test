import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler
from sentence_transformers import SentenceTransformer
from typing import List, Dict
import pandas as pd

# Sample data - Vietnamese tech products
sample_sources = [
    {
        "T√™n": "iPhone 15 Pro Max",
        "M√¥ t·∫£": "ƒêi·ªán tho·∫°i th√¥ng minh cao c·∫•p v·ªõi chip A17 Pro, camera 48MP, m√†n h√¨nh Super Retina XDR, h·ªó tr·ª£ 5G v√† Face ID"
    },
    {
        "T√™n": "Samsung Galaxy S24 Ultra", 
        "M√¥ t·∫£": "Smartphone Android flagship v·ªõi b√∫t S Pen, camera zoom 100x, m√†n h√¨nh Dynamic AMOLED 2X, vi x·ª≠ l√Ω Snapdragon 8 Gen 3"
    },
    {
        "T√™n": "MacBook Air M3",
        "M√¥ t·∫£": "Laptop si√™u m·ªèng nh·∫π v·ªõi chip M3, m√†n h√¨nh Liquid Retina 13.6 inch, pin 18 gi·ªù, thi·∫øt k·∫ø nh√¥m cao c·∫•p"
    },
    {
        "T√™n": "Dell XPS 13",
        "M√¥ t·∫£": "Ultrabook Windows cao c·∫•p v·ªõi Intel Core i7, m√†n h√¨nh InfinityEdge 4K, thi·∫øt k·∫ø carbon fiber, c·ªïng Thunderbolt 4"
    },
    {
        "T√™n": "iPad Pro 12.9",
        "M√¥ t·∫£": "M√°y t√≠nh b·∫£ng chuy√™n nghi·ªáp v·ªõi chip M2, m√†n h√¨nh Liquid Retina XDR, h·ªó tr·ª£ Apple Pencil v√† Magic Keyboard"
    },
    {
        "T√™n": "Surface Pro 9",
        "M√¥ t·∫£": "Tablet 2-in-1 Windows v·ªõi Intel Core i5, m√†n h√¨nh c·∫£m ·ª©ng 13 inch, b√†n ph√≠m r·ªùi, b√∫t Surface Pen t√≠ch h·ª£p"
    },
    {
        "T√™n": "Sony WH-1000XM5",
        "M√¥ t·∫£": "Tai nghe ch·ªëng ·ªìn cao c·∫•p v·ªõi c√¥ng ngh·ªá AI, driver 30mm, pin 30 gi·ªù, k·∫øt n·ªëi Bluetooth 5.2"
    },
    {
        "T√™n": "AirPods Pro 2",
        "M√¥ t·∫£": "Tai nghe kh√¥ng d√¢y true wireless v·ªõi chip H2, ch·ªëng ·ªìn ch·ªß ƒë·ªông, √¢m thanh kh√¥ng gian, case s·∫°c MagSafe"
    },
    {
        "T√™n": "Nintendo Switch OLED",
        "M√¥ t·∫£": "Console game c·∫ßm tay v·ªõi m√†n h√¨nh OLED 7 inch, dock TV, Joy-Con controllers, ch∆°i ƒë∆∞·ª£c c·∫£ ·ªü nh√† v√† di ƒë·ªông"
    },
    {
        "T√™n": "PlayStation 5",
        "M√¥ t·∫£": "M√°y ch∆°i game th·∫ø h·ªá m·ªõi v·ªõi SSD si√™u nhanh, ray tracing, DualSense controller haptic feedback, 4K gaming"
    },
    {
        "T√™n": "Canon EOS R6 Mark II",
        "M√¥ t·∫£": "M√°y ·∫£nh mirrorless full-frame v·ªõi c·∫£m bi·∫øn 24.2MP, quay video 4K, ch·ªëng rung IBIS, autofocus Dual Pixel"
    },
    {
        "T√™n": "GoPro Hero 12",
        "M√¥ t·∫£": "Action camera ch·ªëng n∆∞·ªõc v·ªõi video 5.3K, ch·ªëng rung HyperSmooth, GPS t√≠ch h·ª£p, ƒëi·ªÅu khi·ªÉn b·∫±ng gi·ªçng n√≥i"
    }
]

# Initialize embedding model (you might need to install: pip install sentence-transformers)
print("ƒêang t·∫£i embedding model...")
embedding_model = SentenceTransformer('all-MiniLM-L6-v2')  # English model, but works okay with Vietnamese

def tfidf_search(question: str, sources: List[Dict], top_k: int = 3) -> List[tuple]:
    """TF-IDF search only"""
    texts = [f"{src['T√™n']} {src['M√¥ t·∫£']}" for src in sources]
    
    vectorizer = TfidfVectorizer().fit(texts + [question])
    tfidf_matrix = vectorizer.transform(texts)
    question_vec = vectorizer.transform([question])
    tfidf_sim = cosine_similarity(question_vec, tfidf_matrix).flatten()
    
    # Get top results with scores
    top_indices = tfidf_sim.argsort()[-top_k:][::-1]
    results = [(sources[i], tfidf_sim[i]) for i in top_indices]
    return results

def hybrid_search(question: str, sources: List[Dict], top_k: int = 3) -> List[tuple]:
    """Hybrid search: TF-IDF + Embedding"""
    texts = [f"{src['T√™n']} {src['M√¥ t·∫£']}" for src in sources]

    # 1. TF-IDF + cosine similarity
    vectorizer = TfidfVectorizer().fit(texts + [question])
    tfidf_matrix = vectorizer.transform(texts)
    question_vec = vectorizer.transform([question])
    tfidf_sim = cosine_similarity(question_vec, tfidf_matrix).flatten()

    # 2. Embedding vector search
    text_embeddings = embedding_model.encode(texts)
    question_embedding = embedding_model.encode([question])[0]
    emb_sim = np.dot(text_embeddings, question_embedding) / (
        np.linalg.norm(text_embeddings, axis=1) * np.linalg.norm(question_embedding) + 1e-8
    )

    # 3. Normalize scores
    scaler = MinMaxScaler()
    tfidf_sim_scaled = scaler.fit_transform(tfidf_sim.reshape(-1, 1)).flatten()
    emb_sim_scaled = scaler.fit_transform(emb_sim.reshape(-1, 1)).flatten()

    # 4. Combine scores
    hybrid_score = 0.5 * tfidf_sim_scaled + 0.5 * emb_sim_scaled

    # 5. Get top results with scores
    top_indices = hybrid_score.argsort()[-top_k:][::-1]
    results = [(sources[i], hybrid_score[i]) for i in top_indices]
    return results

def print_results(results: List[tuple], method_name: str):
    """Print search results in a nice format"""
    print(f"\nüîç {method_name} Results:")
    print("-" * 50)
    for i, (source, score) in enumerate(results, 1):
        print(f"{i}. {source['T√™n']} (Score: {score:.4f})")
        print(f"   üìù {source['M√¥ t·∫£']}")
        print()

def compare_searches(question: str, sources: List[Dict], top_k: int = 3):
    """Compare TF-IDF and Hybrid search results"""
    print(f"‚ùì C√¢u h·ªèi: '{question}'")
    print("=" * 80)
    
    # TF-IDF search
    tfidf_results = tfidf_search(question, sources, top_k)
    print_results(tfidf_results, "TF-IDF Search")
    
    # Hybrid search
    hybrid_results = hybrid_search(question, sources, top_k)
    print_results(hybrid_results, "Hybrid Search")
    
    # Show difference
    tfidf_names = [result[0]['T√™n'] for result in tfidf_results]
    hybrid_names = [result[0]['T√™n'] for result in hybrid_results]
    
    print("üìä So s√°nh k·∫øt qu·∫£:")
    print(f"TF-IDF top 3: {tfidf_names}")
    print(f"Hybrid top 3: {hybrid_names}")
    
    different_results = set(tfidf_names) ^ set(hybrid_names)
    if different_results:
        print(f"üîÑ Kh√°c bi·ªát: {different_results}")
    else:
        print("‚úÖ K·∫øt qu·∫£ gi·ªëng nhau")
    
    print("\n" + "="*80 + "\n")

# Test cases
test_questions = [
    "T√¥i mu·ªën mua ƒëi·ªán tho·∫°i c√≥ camera t·ªët",  # Should favor phones with good cameras
    "Laptop n√†o ph√π h·ª£p cho c√¥ng vi·ªác vƒÉn ph√≤ng?",  # Should find laptops
    "Thi·∫øt b·ªã gaming t·ªët nh·∫•t",  # Should find gaming devices
    "Tai nghe ch·ªëng ·ªìn cao c·∫•p",  # Should find noise-canceling headphones
    "M√°y ·∫£nh ch·ª•p h√¨nh ƒë·∫πp",  # Should find cameras
    "Tablet ƒë·ªÉ v·∫Ω v√† thi·∫øt k·∫ø",  # Should find tablets good for design
    "iPhone m·ªõi nh·∫•t",  # Exact keyword match
    "S·∫£n ph·∫©m Apple",  # Brand-based search
]

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu so s√°nh TF-IDF vs Hybrid Search")
    print("Loading embedding model... (c√≥ th·ªÉ m·∫•t v√†i gi√¢y)")
    
    # Run comparison for each test question
    for question in test_questions:
        try:
            compare_searches(question, sample_sources)
        except Exception as e:
            print(f"‚ùå L·ªói v·ªõi c√¢u h·ªèi '{question}': {e}")
            continue
